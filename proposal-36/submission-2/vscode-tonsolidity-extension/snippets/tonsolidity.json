{
	".source.tonsolidity": {
		"spdx license": {
			"prefix": "spdx", 
			"body": "// SPDX-License-Identifier: MIT",
			"description": "SPDX License"
		},
		"pragma ton-solidity":{
			"prefix": "pragm",
			"body": "pragma ton-solidity ${1:version};"
		},
		"pragma ton-solidity example":{
			"prefix": "pragm-ex",
			"body": "pragma ton-solidity >=0.5.0 <0.8.0;"
		},
		"import contract": {
			"prefix": "imp",
			"body": "import '${1:contract}';"
		},
        "contract declaration": {
			"prefix": "con",
			"body": "contract ${1:Name} {\n\t$0\n}"
		},
		"library declaration": {
			"prefix": "lib",
			"body": "library ${1:Name} {\n\t$0\n}"
		},
		"interface declaration": {
			"prefix": "interf",
			"body": "interface ${1:Name} {\n\t$0\n}"
		},
		"enum declaration": {
			"prefix": "enum",
			"body": "enum ${1:Name} {${2:item1}, ${3:item2} }"
		},
        "mapping declaration":{
            "prefix": "map",
			"body": "mapping (${1:type1}=>${2:type2}) ${3:name};"
		},
		"constructor declaration": {
			"prefix": "const",
			"body": "constructor (${1:type} ${2:name}) public {\n\t$0\n}"
		},
        "function declaration": {
			"prefix": "func",
			"body": "function ${1:name}(${2:type} ${3:name}) {\n\t$0\n}"
		},
        "function return declaration": {
			"prefix": "funcr",
			"body": "function ${1:name}(${2:type} ${3:name}) returns (${4:type} ${5:name}) {\n\t$0\n}"
		},
        "function view declaration": {
			"prefix": "funcrview",
			"body": "function ${1:name}(${2:type} ${3:name}) view public returns (${4:type} ${5:name}) {\n\t$0\n}"
        },
        "event declaration": {
			"prefix": "ev",
			"body": "event ${1:name}(${2:type} ${3:name} $0);"
        },
        "modifier declaration": {
			"prefix": "mod",
			"body": "modifier ${1:name}($2) {\n\t$0_\n}"
        },
        "if else statement": {
			"prefix": "ife",
			"body": "if (${1:condition}) {\n\t$2\n} else {\n\t$0\n}"
		},
        "for statement": {
			"prefix": "for",
			"body": "for (uint256 ${1:index} = 0; $1 < ${2:array}.length; $1${3:++}) {\n\t$0\n}"
		},
		"loop statement": {
			"prefix": "loop",  
			"body": "for (${1:index} : ${2:array}) {\n\t$0\n}"
		},
		"repeat statement": {
			"prefix": "repeat",  
			"body": "repeat(${1:index}) {\n\t$0\n}"
		},
		"unchecked" : {
			"prefix": "unchecked",
			"body": "unchecked {\n\t$0\n}"
		},
		"receive declaration": {
			"prefix": "receive",
			"body": "receive() external {\n\t$0\n}"
		},
		"fallback declaration": {
			"prefix": "fallback",
			"body": "fallback() external {\n\t$0\n}"
		},
		"onBounce declaration": {
			"prefix": "onBounce",
			"body": "onBounce(TvmSlice ${1:body}) external {\n\t$0\n}"
		},
		"onTickTock declaration": {
			"prefix": "onTickTock",
			"body": "onTickTock(bool ${1:name}) external {\n\t$0\n}"
		},
		"onCodeUpgrade declaration": {
			"prefix": "onCodeUpgrade",
			"body": "onCodeUpgrade() private {\n\t$0\n}"
		},
		"afterSignatureCheck declaration": {
			"prefix": "afterSignatureCheck",
			"body": "afterSignatureCheck(TvmSlice ${1:body}, TvmCell ${2:message}) private inline returns (TvmSlice) {\n\t$0\n}"
		},
		"selfdestruct declaration": {
			"prefix": "selfdestruct",
			"body": "selfdestruct(${1:type} ${2:name});"
		},
		"sha256 declaration": {
			"prefix": "sha256",
			"body": "sha256(${1:type} ${2:name}) returns (${3:type});"
		},
		"gasToValue declaration": {
			"prefix": "gasToValue",
			"body": "gasToValue(${1:type} ${2:name}, ${3:type} ${4:name}) returns (${5:type} ${6:name});"
		},
		"valueToGas declaration": {
			"prefix": "valueToGas",
			"body": "valueToGas(${1:type} ${2:name}, ${3:type} ${4:name}) returns (${5:type} ${6:name});"
		}
    }
}
