#
# This Expect script was generated by autoexpect on Sat Aug 28 14:06:03 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set date [clock seconds]
set addr [exec cat ../serviceDebot.addr]
set wallet [exec cat ../msig.service.addr]
set pubkey [exec cat ../service.keys.json | jq .public -r]
set subsname [exec echo "Autotest $date" > subs.name]

set timeout -1
spawn tonos-cli config --pubkey 0x$pubkey --wallet $wallet
spawn tonos-cli --url https://gql.custler.net debot fetch $addr
match_max 100000
expect  "Config: *\r
Connecting to https://gql.custler.net\r
DeBot Info:\r
Name   : Subscription service DeBot\r
Version: *\r
Author : INTONNATION\r
Publisher: INTONNATION\r
Support: *\r
Description: Subscription service DeBot\r
Hello! Use this DeBot to manage your subscription service.\r
Run the DeBot (y/n)?\r
"
send -- "y\r"
expect  "y\r
\r
Available options:\r
1) Register service\r
2) Get service info\r
3) Delete my service\r
\r
debash\$ "
send -- "1\r"
expect -exact "1\r
Input the name of your service:\r
"
send -- "Autotest $date\r"
expect -exact "Autotest $date\r
Provide description for subscribers:\r
"
send -- "Aiti"
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- "utotest3"
expect -exact " "
send -- "\r"
expect -exact "\r
Input payment period for subscribers (days):\r
"
send -- "31\r"
expect -exact "31\r
Input a cost of your service subscription for selected period (TONs):\r
"
send -- "1\r"
expect  "1\r
Input an address to receive payments:\r
"
send -- "$wallet"
expect -exact "$wallet"
send -- "\r"
expect  -exact "\r
Choose your keys to sign transactions from multisig.\r
enter seed phrase or path to keypair file\r
"
send -- "../service.keys,."
expect -exact " "
send -- ""
expect -exact " "
send -- ".json\r"
expect  ".json\r
DeBot Info:\r
Name   : Subscription Manager\r
Version: *\r
Author : INTONATION\r
Publisher: INTONATION\r
Support: *\r
Description: Managing user subscriptions\r
Hello, I am an Subscription Manager DeBot.\r
Run the DeBot (y/n)?\r
"
send -- "y\r"
expect "y\r
*\r
"
send -- "y\r"
expect  "y\r
Sending message *\r
Service successfully registered:\r
*\r
Available options:\r
1) Register service\r
2) Get service info\r
3) Delete my service\r
\r
debash\$ "
send -- ""
